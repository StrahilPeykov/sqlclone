{
  "theory": "# Filtering Rows in SQL\n\nFiltering is one of the most fundamental operations in SQL. It allows you to select only the rows that meet specific criteria.\n\n## The WHERE Clause\n\nThe `WHERE` clause is used to filter records based on specific conditions:\n\n```sql\nSELECT * FROM companies\nWHERE country = 'Netherlands';\n```\n\n## Comparison Operators\n\n- `=` Equal to\n- `<>` or `!=` Not equal to\n- `<` Less than\n- `>` Greater than\n- `<=` Less than or equal to\n- `>=` Greater than or equal to\n\n## Pattern Matching\n\nUse `LIKE` with wildcards:\n- `%` matches any sequence of characters\n- `_` matches a single character\n\n```sql\nSELECT * FROM companies\nWHERE company_name LIKE 'Meta%';\n```",
  
  "reference": {
    "syntax": "SELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
    
    "examples": [
      {
        "title": "Filter by exact value",
        "sql": "SELECT * FROM companies WHERE country = 'Netherlands';",
        "description": "Returns all companies from the Netherlands"
      },
      {
        "title": "Filter with comparison",
        "sql": "SELECT * FROM positions WHERE salary > 100000;",
        "description": "Returns all positions with salary greater than 100,000"
      },
      {
        "title": "Filter with pattern",
        "sql": "SELECT * FROM companies WHERE company_name LIKE 'M%';",
        "description": "Returns all companies whose name starts with 'M'"
      },
      {
        "title": "Filter with IN operator",
        "sql": "SELECT * FROM companies WHERE country IN ('Netherlands', 'United States');",
        "description": "Returns companies from either Netherlands or United States"
      }
    ],
    
    "commonMistakes": [
      {
        "mistake": "Using = with NULL values",
        "correction": "Use IS NULL or IS NOT NULL instead"
      },
      {
        "mistake": "Forgetting quotes around string values",
        "correction": "Always wrap string values in single quotes"
      },
      {
        "mistake": "Using LIKE without wildcards",
        "correction": "Add % or _ wildcards for pattern matching"
      }
    ]
  },
  
  "exercises": [
    {
      "id": "filter-by-country",
      "version": 1,
      "points": 10,
      "config": {
        "database": "companies",
        "timeLimit": 300,
        "hints": [
          "Use the WHERE clause to filter rows",
          "The syntax is: WHERE column = 'value'",
          "Don't forget quotes around string values"
        ]
      },
      "generator": "function generate(utils) {\n  const countries = ['Netherlands', 'United States', 'United Kingdom'];\n  const country = utils.selectRandomly(countries);\n  return {\n    targetCountry: country,\n    description: `Find all companies from ${country}`,\n    expectedQuery: `SELECT * FROM companies WHERE country = '${country}'`\n  };\n}",
      "validator": "function validate(input, state, result) {\n  if (!result || result.length === 0) return false;\n  const expectedCountries = result[0].values.every(row => row[2] === state.targetCountry);\n  return expectedCountries;\n}",
      "solutionTemplate": "SELECT * FROM companies\nWHERE country = '{{targetCountry}}';"
    },
    
    {
      "id": "filter-by-salary",
      "version": 1,
      "points": 15,
      "config": {
        "database": "positions",
        "hints": [
          "Use comparison operators in WHERE clause",
          "The syntax for greater than is: WHERE column > value",
          "Numeric values don't need quotes"
        ]
      },
      "generator": "function generate(utils) {\n  const minSalary = utils.generateRandomNumber(80000, 120000);\n  return {\n    minSalary: minSalary,\n    description: `Find all positions with salary greater than $${minSalary.toLocaleString()}`,\n    expectedQuery: `SELECT * FROM positions WHERE salary > ${minSalary}`\n  };\n}",
      "validator": "function validate(input, state, result) {\n  if (!result || result.length === 0) return false;\n  // positions schema: id(0), company_id(1), company_name(2), country(3), city(4), position(5), department(6), salary(7), remote_allowed(8)\n  return result[0].values.every(row => row[7] > state.minSalary);\n}",
      "solutionTemplate": "SELECT * FROM positions\nWHERE salary > {{minSalary}};"
    },
    
    {
      "id": "filter-with-pattern",
      "version": 1,
      "points": 20,
      "config": {
        "database": "companies",
        "hints": [
          "Use the LIKE operator for pattern matching",
          "Use % as a wildcard for any characters",
          "The syntax is: WHERE column LIKE 'pattern'"
        ]
      },
      "generator": "function generate(utils) {\n  const patterns = [\n    { letter: 'M', description: 'Find all companies whose name starts with M' },\n    { letter: 'G', description: 'Find all companies whose name starts with G' },\n    { letter: 'T', description: 'Find all companies whose name starts with T' }\n  ];\n  const pattern = utils.selectRandomly(patterns);\n  return {\n    letter: pattern.letter,\n    description: pattern.description,\n    expectedQuery: `SELECT * FROM companies WHERE company_name LIKE '${pattern.letter}%'`\n  };\n}",
      "validator": "function validate(input, state, result) {\n  if (!result || result.length === 0) return false;\n  return result[0].values.every(row => row[1].startsWith(state.letter));\n}",
      "solutionTemplate": "SELECT * FROM companies\nWHERE company_name LIKE '{{letter}}%';"
    }
  ]
}
